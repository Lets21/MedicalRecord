version: 2.1

executors:
  node_browsers:
    docker:
      - image: cimg/node:20.11-browsers
  node_light:
    docker:
      - image: cimg/node:20.11

workflows:
  build_and_deploy:
    jobs:
      - install_deps
      - lint:
          requires: [install_deps]
      - test_unit:
          requires: [install_deps]
      - build:
          requires: [lint, test_unit]
      - smoke_e2e:
          requires: [build]
      # - deploy_vercel:
      #     requires: [smoke_e2e]
      #     filters: { branches: { only: main } }

jobs:
  install_deps:
    executor: node_browsers
    steps:
      - checkout
      - run: node -v && npm -v
      - restore_cache:
          keys:
            - npm-v1-{{ arch }}-{{ checksum "package-lock.json" }}
            - npm-v1-
      - run:
          name: Instalar dependencias
          command: npm ci
      - save_cache:
          key: npm-v1-{{ arch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - package.json
            - package-lock.json

  lint:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace: { at: . }
      - run:
          name: Lint
          command: npm run lint || echo "sin lint estricto a√∫n"

  test_unit:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace: { at: . }
      - run:
          name: Unit tests
          command: npm run test:unit -- --reporter=junit --outputFile=junit.xml || echo "tests b√°sicos"
      - store_test_results: { path: junit.xml, when: always }
      - store_artifacts: { path: coverage, destination: coverage, when: always }

  build:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace: { at: . }
      - run:
          name: Build de producci√≥n
          command: |
            npm ci
            npm run build
            test -f dist/index.html
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - store_artifacts: { path: dist, destination: dist }

  smoke_e2e:
    executor: node_light
    environment:
      APP_URL: "http://localhost:4173"
    steps:
      - checkout
      - attach_workspace: { at: . }
      - run:
          name: Vite preview + smoke con espera y limpieza robustas
          command: |
            set -euo pipefail

            # Arranca vite preview en background y guarda PID
            npx vite preview --port 4173 --strictPort &> /tmp/preview.log &
            PID=$!

            # Asegura limpieza pase lo que pase
            cleanup() {
              if kill -0 "$PID" 2>/dev/null; then
                kill "$PID" || true
                sleep 1
                kill -9 "$PID" || true
              fi
            }
            trap cleanup EXIT

            # Espera tolerante a fallos hasta 30s
            READY=0
            set +e
            for i in $(seq 1 30); do
              curl -fsS "$APP_URL" > /dev/null
              if [ $? -eq 0 ]; then
                READY=1
                break
              fi
              sleep 1
            done
            set -e

            if [ "$READY" -ne 1 ]; then
              echo "‚ùå El servidor de preview no levant√≥ en 30s."
              echo "---- √öltimas l√≠neas de preview.log ----"
              tail -n 200 /tmp/preview.log || true
              exit 1
            fi

            # Validaci√≥n m√≠nima del HTML servido
            HTML="$(curl -fsS "$APP_URL")"
            echo "$HTML" | grep -qi '<div id="root">' >/dev/null

            echo "‚úÖ Smoke: p√°gina responde"
          no_output_timeout: 5m
      - store_artifacts: { path: /tmp/preview.log, destination: preview.log }
      - run:
          name: Notificar Telegram (√©xito)
          when: on_success
          command: |
            if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
              MSG="‚úÖ Smoke OK ‚Ä¢ ${CIRCLE_PROJECT_REPONAME} ‚Ä¢ ${CIRCLE_BRANCH} ‚Ä¢ ${CIRCLE_BUILD_URL}"
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                -d chat_id="${TELEGRAM_CHAT_ID}" --data-urlencode text="$MSG" >/dev/null || true
            fi
      - run:
          name: Notificar Telegram (fallo)
          when: on_fail
          command: |
            if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
              MSG="‚ùå Smoke FAIL ‚Ä¢ ${CIRCLE_PROJECT_REPONAME} ‚Ä¢ ${CIRCLE_BRANCH} ‚Ä¢ ${CIRCLE_BUILD_URL}"
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                -d chat_id="${TELEGRAM_CHAT_ID}" --data-urlencode text="$MSG" >/dev/null || true
            fi

  deploy_vercel:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace: { at: . }
      - run:
          name: Deploy a Vercel (producci√≥n)
          command: |
            set -euo pipefail
            if [ -z "${VERCEL_TOKEN:-}" ] || [ -z "${VERCEL_PROJECT_ID:-}" ] || [ -z "${VERCEL_ORG_ID:-}" ]; then
              echo "Faltan VERCEL_TOKEN / VERCEL_PROJECT_ID / VERCEL_ORG_ID"
              exit 1
            fi
            npx -y vercel pull --yes --environment=production --token "$VERCEL_TOKEN"
            npx -y vercel build --prod --token "$VERCEL_TOKEN"
            npx -y vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
      - run:
          name: Notificar Telegram (deploy)
          when: on_success
          command: |
            if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
              MSG="üöÄ Deploy OK ‚Ä¢ ${CIRCLE_PROJECT_REPONAME} ‚Ä¢ ${CIRCLE_BUILD_URL}"
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                -d chat_id="${TELEGRAM_CHAT_ID}" --data-urlencode text="$MSG" >/dev/null || true
            fi
