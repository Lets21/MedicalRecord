version: 2.1

executors:
  node_browsers:
    docker:
      - image: cimg/node:20.11-browsers

workflows:
  build_and_deploy:
    jobs:
      - install_deps
      - lint:
          requires: [install_deps]
      - test_unit:
          requires: [install_deps]
      - build:
          requires: [lint, test_unit]
      - smoke_e2e:
          requires: [build]
      # Activa este job solo si vas a desplegar desde CircleCI a Vercel
      # - deploy_vercel:
      #     requires: [smoke_e2e]
      #     filters:
      #       branches:
      #         only: main

jobs:
  install_deps:
    executor: node_browsers
    steps:
      - checkout
      - run: node -v && npm -v
      - restore_cache:
          keys:
            - npm-v1-{{ arch }}-{{ checksum "package-lock.json" }}
            - npm-v1-
      - run:
          name: Instalar dependencias
          command: npm ci
      - save_cache:
          key: npm-v1-{{ arch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - package.json
            - package-lock.json

  lint:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Lint
          command: npm run lint || echo "sin lint estricto aún"

  test_unit:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Unit tests
          command: npm run test:unit -- --reporter=junit --outputFile=junit.xml || echo "tests básicos"
      - store_test_results:
          path: junit.xml
          when: always
      - store_artifacts:
          path: coverage
          destination: coverage
          when: always

  build:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build de producción
          command: |
            npm run build
            test -f dist/index.html
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - store_artifacts:
          path: dist
          destination: dist

  smoke_e2e:
  # usa la imagen ligera si no corres Selenium
  executor: node_light   # cimg/node:20.11
  environment:
    APP_URL: "http://localhost:4173"
  steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        name: Vite preview + smoke con limpieza robusta
        command: |
          set -euo pipefail

          # Levanta vite preview y asegura limpieza aunque falle el script
          npx vite preview --port 4173 --strictPort &> /tmp/preview.log &
          PID=$!

          # Mata todo al salir, pase lo que pase
          cleanup() {
            # intenta TERM, luego KILL si aún vive
            if kill -0 "$PID" 2>/dev/null; then
              kill "$PID" || true
              sleep 1
              kill -9 "$PID" || true
            fi
            # como plan B, mata procesos por nombre (vite preview)
            pkill -f "vite.*preview" || true
          }
          trap cleanup EXIT

          # Espera a que responda (máx 30s)
          for i in $(seq 1 30); do
            if curl -fsS "$APP_URL" > /dev/null; then
              break
            fi
            sleep 1
          done

          # Valida que entregue index.html
          curl -fsS "$APP_URL" | grep -qi "<div id=\"root\"" >/dev/null
          echo "Smoke: página responde"
        no_output_timeout: 5m
    - store_artifacts:
        path: /tmp/preview.log
        destination: preview.log
    - run:
        name: Notificar Telegram (éxito)
        when: on_success
        command: |
          if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
            MSG="✅ Smoke OK • ${CIRCLE_PROJECT_REPONAME} • ${CIRCLE_BRANCH} • ${CIRCLE_BUILD_URL}"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" --data-urlencode text="$MSG" >/dev/null || true
          fi
    - run:
        name: Notificar Telegram (fallo)
        when: on_fail
        command: |
          if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
            MSG="❌ Smoke FAIL • ${CIRCLE_PROJECT_REPONAME} • ${CIRCLE_BRANCH} • ${CIRCLE_BUILD_URL}"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" --data-urlencode text="$MSG" >/dev/null || true
          fi


  # Despliegue opcional a Vercel vía CLI
  deploy_vercel:
    executor: node_browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Deploy a Vercel (producción)
          command: |
            set -euo pipefail
            if [ -z "${VERCEL_TOKEN:-}" ] || [ -z "${VERCEL_PROJECT_ID:-}" ] || [ -z "${VERCEL_ORG_ID:-}" ]; then
              echo "Faltan VERCEL_TOKEN / VERCEL_PROJECT_ID / VERCEL_ORG_ID"
              exit 1
            fi
            npx -y vercel pull --yes --environment=production --token "$VERCEL_TOKEN"
            npx -y vercel build --prod --token "$VERCEL_TOKEN"
            npx -y vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
      - run:
          name: Notificar Telegram (deploy)
          when: on_success
          command: |
            if [ -n "${TELEGRAM_BOT_TOKEN:-}" ] && [ -n "${TELEGRAM_CHAT_ID:-}" ]; then
              MSG="🚀 Deploy OK • ${CIRCLE_PROJECT_REPONAME} • ${CIRCLE_BUILD_URL}"
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                -d chat_id="${TELEGRAM_CHAT_ID}" --data-urlencode text="$MSG" >/dev/null || true
            fi
